import os
import random
import threading
import time
import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext

key = ''
list_of_files = []

# Targeted file extensions
sensitive_extensions = [
    '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx', '.odt', '.ods', '.odp', '.pdf',
    '.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.raw', '.cr2', '.nef', '.arw',
    '.mp4', '.avi', '.mov', '.mkv', '.wmv', '.mp3', '.wav', '.flac', '.aac', '.ogg',
    '.html', '.css', '.js', '.py', '.java', '.c', '.cpp', '.cs', '.rb', '.php',
    '.sql', '.json', '.xml', '.yml', '.zip', '.rar', '.7z', '.tar', '.gz', '.bz2',
    '.bak', '.iso', '.vhd', '.vmdk', '.mdb', '.accdb', '.sqlite', '.db', '.pst', '.ost',
    '.log', '.cfg', '.ini', '.psd', '.ai', '.indd', '.dwg', '.dxf'
]

def get_files(path):
    global list_of_files
    list_of_files = []
    for root, _, files in os.walk(path):
        for file in files:
            if file.lower().endswith(tuple(sensitive_extensions)):
                list_of_files.append(os.path.join(root, file))

def generate_key():
    global key
    characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
    key = ''.join(random.choice(characters) for _ in range(64))
    key_entry.delete(0, tk.END)
    key_entry.insert(0, key)
    log_output(f"[KEY GENERATED] Save this key: {key}")

def xor_crypt(file, decrypt=False):
    global key
    try:
        key_index = 0
        with open(file, 'rb') as f:
            data = f.read()
        result = bytearray()
        for byte in data:
            result.append(byte ^ ord(key[key_index]))
            key_index = (key_index + 1) % len(key)
        with open(file, 'wb') as f:
            f.write(result)
        action = "DECRYPTED" if decrypt else "ENCRYPTED"
        log_output(f"[{action}] {file}")
    except Exception as e:
        log_output(f"[ERROR] {file} ({e})")

def run_crypt(decrypt=False):
    global key
    key = key_entry.get().strip()
    if not key:
        messagebox.showwarning("Warning", "Please enter or generate a key.")
        return
    if not list_of_files:
        messagebox.showwarning("Warning", "No files to process.")
        return

    threading.Thread(target=lambda: process_files(decrypt), daemon=True).start()

def process_files(decrypt):
    action = "Decryption" if decrypt else "Encryption"
    log_output(f"\n[{action.upper()} STARTED]")
    start_time = time.time()
    for file in list_of_files:
        xor_crypt(file, decrypt)
    duration = time.time() - start_time
    log_output(f"[{action.upper()} FINISHED] Duration: {duration:.2f} seconds\n")
    messagebox.showinfo("Done", f"{action} completed in {duration:.2f} seconds.")

def choose_folder():
    folder = filedialog.askdirectory()
    if folder:
        get_files(folder)
        log_output(f"[SCAN COMPLETE] {len(list_of_files)} file(s) found in: {folder}")

def log_output(message):
    log_area.insert(tk.END, message + '\n')
    log_area.see(tk.END)

# --- GUI Setup ---
root = tk.Tk()
root.title("File Encryptor/Decryptor")
root.geometry("700x500")
root.resizable(False, False)

frame = tk.Frame(root, padx=10, pady=10)
frame.pack(fill=tk.BOTH, expand=True)

tk.Button(frame, text="üìÅ Select Folder", command=choose_folder).grid(row=0, column=0, sticky='ew')
tk.Button(frame, text="üîê Generate Key", command=generate_key).grid(row=0, column=1, sticky='ew')

key_entry = tk.Entry(frame, width=60)
key_entry.grid(row=1, column=0, columnspan=2, pady=10)

tk.Button(frame, text="üîí Encrypt Files", command=lambda: run_crypt(decrypt=False), bg="#ccffcc").grid(row=2, column=0, sticky='ew')
tk.Button(frame, text="üîì Decrypt Files", command=lambda: run_crypt(decrypt=True), bg="#ffcccc").grid(row=2, column=1, sticky='ew')

log_area = scrolledtext.ScrolledText(frame, height=20)
log_area.grid(row=3, column=0, columnspan=2, pady=10, sticky='nsew')

frame.grid_rowconfigure(3, weight=1)
frame.grid_columnconfigure(0, weight=1)
frame.grid_columnconfigure(1, weight=1)

root.mainloop()
